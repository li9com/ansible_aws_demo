---
##
## Tasks install the frontend
## These tasks are executed on group['frontend'] inventory group of hosts
##
- name: Install epel-release package
  yum:
    name: epel-release
    state: present


- name: Install some needed package(s)
  yum:
    name: "{{ item }}"
    state: present
  loop:
    - python2-pip
    - net-tools
    - python-virtualenv



- name: Copy sources to the destination
  synchronize:
    src: "{{ l_tasks_dir }}/frontend"
    dest: /opt
  register: app


- name: Bootstrap python virtual environment
  shell: |
    cd {{ l_app_dir }}
    virtualenv venv
    source venv/bin/activate
    pip2 install -r requirements.txt


- name: Install stopapp.sh, startapp.sh, and other files
  copy:
    content: "{{ item.content }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode | default('0644') }}"
  loop:
    - content: |
        #!/bin/bash
        cd {{ l_app_dir }}
        source venv/bin/activate
        exec flask run -p 80 -h 0.0.0.0
      dest: "{{ l_app_dir }}/startapp.sh"
      mode: "0755"
    - content: |
        #!/bin/bash
        pid=`netstat -tunlp | awk '/0.0.0.0:80/{print $7}' | cut -d '/' -f1`
        if [ -n "$pid" ]; then
          kill -9 $pid
        fi
      dest: "{{ l_app_dir }}/stopapp.sh"
      mode: "0755"
    - content: |+
        {
          "get_item": "{{ l_api_endpoint_url }}",
          "add_item": "{{ l_api_endpoint_url }}",
          "del_item": "{{ l_api_endpoint_url }}",
          "mod_item": "{{ l_api_endpoint_url }}"
        }
      dest: "{{ l_app_dir }}/endpoints.json"
      mode: "0644"
  register: supervisord_conf


- name: Create a SystemD unit
  copy:
    content: |
      [Unit]
      Description=DemoApp Frontend

      [Service]
      Type=Working
      ExecStart={{ l_app_dir }}/startapp.sh
      ExecStop={{ l_app_dir }}/stopapp.sh
      Restart=Always

      [Install]
      WantedBy=default.target
    dest: /etc/systemd/system/frontend.service
    mode: "0644"
  register: unit_file


- name: Make sure systemd daemon
  service:
    name: frontend.service
    daemon_reload: true
    enabled: true
    state: started


- name: Reload systemd daemon
  service:
    name: frontend.service
    state: restarted
  when:
  - unit_file is changed or app is changed

