---
- name: Look up a needed VPC
  ec2_vpc_net_facts:
    filters:
      "tag:Name": "{{ vpc.stack_name }}"
  register: found_vpcs


- name: Display found VPCs
  debug:
    var: found_vpcs.vpcs


- name: Stop the playbook if the needed VPC wasn't found
  when: found_vpcs.vpcs | length == 0
  meta: end_play


- name: Set VPC id
  set_fact:
    vpc_id: "{{ found_vpcs.vpcs[0].vpc_id }}"


- name: Display Network configuration
  debug:
    var: vpc_id


- name: Uninstall a VPC Security Group
  ec2_group:
    name: "{{ vpc.network.security_group.name }}"
    region: "{{ vpc.region }}"
    vpc_id: "{{ vpc_id }}"
    state: "absent"
  tags:
    - security_group


- name: Uninstall a routing table
  ec2_vpc_route_table:
    region: "{{ vpc.region }}"
    vpc_id: "{{ vpc_id }}"
    tags: "{{ vpc.public_subnet_routing_table.tags }}"
    state: "absent"


- name: Uninstall a VPC Internet Gateway
  ec2_vpc_igw:
    region: "{{ vpc.region }}"
    vpc_id: "{{ vpc_id }}"
    state: "absent"
  tags:
    - internet_gateway


- name: Uninstall VPC subnet
  ec2_vpc_subnet:
    region: "{{ vpc.region }}"
    cidr: "{{ item.cidr }}"
    az: "{{ item.availability_zone }}"
    vpc_id: "{{ vpc_id }}"
    state: absent
  loop: "{{ vpc.network.subnets }}"
  tags:
    - subnet


- name: And finally uninstall Network and VPC
  ec2_vpc_net:
    region: "{{ vpc.region }}"
    cidr_block: "{{ vpc.network.cidr }}"
    name: "{{ vpc.stack_name }}"
    state: absent
  register: vpc_network
  tags:
    - network

